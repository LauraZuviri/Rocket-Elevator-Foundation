<% 
require "net/http"
require "uri"
uri = URI.parse("https://stream.watsonplatform.net/authorization/api/v1/token?url=https://stream.watsonplatform.net/text-to-speech/api") 
  request = Net::HTTP::Get.new(uri)
  request.basic_auth("fa810f5b-f36a-4120-9c36-213c48f4bcd5", "6c3zk3AN1PHz")
  req_options = {
    use_ssl: uri.scheme = "https"
  }

  response = Net::HTTP.start(uri.hostname, uri.port, req_options)  do |http|
    http.request(request)
  end
  p response.body
  @token  = response.body
  @text = "Welcome #{current_user.first_name} #{current_user.last_name}, There are currently #{Elevator.all.count} elevators deployed in the #{Building.all.count} buildings of your #{Customer.all.count} customers, Currently, #{Elevator.all.where(status: "Active").count} elevators are not in Running Status and are being serviced, You currently have #{Quote.all.count} quotes awaiting processing, You currently have #{Lead.all.count} leads in your contact requests, #{Battery.all.count} Batteries are deployed across #{Address.select(:city).map(&:city).count} cities" %>

<%= javascript_include_tag('https://github.com/watson-developer-cloud/speech-javascript-sdk/releases/download/v0.35.1/watson-speech.js') %>
<% if @abstract_models %>
  <table class="table table-condensed table-striped">
    <thead>
      <tr>
        <th class="shrink model-name">
          <%= t "admin.table_headers.model_name" %>
        </th>
        <th class="shrink last-created">
          <%= t "admin.table_headers.last_created" %>
        </th>
        <th class="records">
          <%= t "admin.table_headers.records" %>
        </th>
        <th class="shrink controls"></th>
      </tr>
    </thead>
    <tbody>
      <% @abstract_models.each do |abstract_model| %>
        <% if authorized? :index, abstract_model %>
          <% index_path = index_path(model_name: abstract_model.to_param) %>
          <% row_class = "#{cycle("odd", "even")}#{" link" if index_path} #{abstract_model.param_key}_links" %>
          <tr class="<%= row_class %>" data-link="<%= index_path %>">
            <% last_created = @most_recent_created[abstract_model.model.name] %>
            <% active = last_created.try(:today?) %>
            <td>
              <span class="show">
                <%= link_to capitalize_first_letter(abstract_model.config.label_plural), index_path, class: 'pjax' %>
              </span>
            </td>
            <td>
              <% if last_created %>
                <%= time_ago_in_words last_created %>
                <%= t "admin.misc.ago" %>
              <% end %>
            </td>
            <td>
              <% count = @count[abstract_model.model.name] %>
              <% percent = count > 0 ? (@max <= 1 ? count : ((Math.log(count+1) * 100.0) / Math.log(@max+1)).to_i) : -1 %>
              <div class="progress-<%= get_indicator(percent) %> <%= active && 'active progress-striped' %> progress" style="margin-bottom:0px">
                <div class="progress-bar-<%= get_indicator(percent) %> progress-bar animate-width-to" data-animate-length="<%= ([1.0, percent].max.to_i * 20) %>" data-animate-width-to="<%= [2.0, percent].max.to_i %>%" style="width:2%">
                  <%= @count[abstract_model.model.name] %>
                </div>
              </div>
            </td>
            <td class="links">
              <ul class="inline list-inline">
                <%= menu_for :collection, abstract_model, nil, true %>
              </ul>
            </td>
          </tr>
        <% end %>
      <% end %>
    </tbody>
  </table>
<% end %>
<% if @auditing_adapter && authorized?(:history_index) %>
  <div class="block" id="block-tables">
    <div class="content">
      <h2>
        <%= t("admin.actions.history_index.menu") %>
      </h2>
      <%= render partial: 'rails_admin/main/dashboard_history' %>
    </div>
  </div>
<% end %>
<button id="log">Watson</button>
<script>
var opts = {
  token: '<%= @token %>',
  voice: 'en-GB_KateVoice',
  text: '<%= @text %>'
}

const main = async () => {
  const audioTag = WatsonSpeech.TextToSpeech.synthesize(opts)
    //   webkit-playsinline="true"
    // playsinline="true"
  audioTag.play()
}

document.querySelector("#log").onclick = () => {
  main()
}
</script>